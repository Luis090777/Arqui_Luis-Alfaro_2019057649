
Elf64_Sym struc ; (sizeof=0x18, align=0x8, mappedto_1)
                        ; XREF: LOAD:0000000000400298/r
                        ; LOAD:00000000004002B0/r ...
st_name dd ?            ; offset (004002E0)
st_info db ?
st_other db ?
st_shndx dw ?
st_value dq ?           ; offset (00000000)
st_size dq ?
Elf64_Sym ends


Elf64_Rela struc ; (sizeof=0x18, align=0x8, copyof_2)
                        ; XREF: LOAD:0000000000400358/r
                        ; LOAD:0000000000400370/r
r_offset dq ?
r_info dq ?
r_addend dq ?
Elf64_Rela ends


Elf64_Dyn struc ; (sizeof=0x10, align=0x8, copyof_3)
                        ; XREF: LOAD:_DYNAMIC/r
                        ; LOAD:0000000000600E50/r ...
d_tag dq ?
d_un dq ?
Elf64_Dyn ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : C1627F9802BF1F2E46883D55894BB71FD5B8DC8FEA3013CE0A90F941E1DD78BB
; Input MD5    : 31DD1AFD07DEB97F83074934713CD7C7
; Input CRC32  : 479998D5

; File Name   : C:\Users\Luis Alfaro\Desktop\Tarea Decoder\main
; Format      : ELF64 for x86-64 (Executable)
; Imagebase   : 400000
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libm.so.6'
; Needed Library 'libpthread.so.0'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'main.c'
; Source File : 'crtstuff.c'

.686p
.mmx
.model flat
.intel_syntax noprefix


; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD segment byte public 'CODE' use64
assume cs:LOAD
;org 400000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_400000 dd 464C457Fh ; File format: \x7FELF
db 2                    ; File class: 64-bit
db 1                    ; Data encoding: little-endian
db 1                    ; File version
db 0                    ; OS/ABI: UNIX System V ABI
db 0                    ; ABI Version
db 7 dup(0)             ; Padding
dw 2                    ; File type: Executable
dw 3Eh                  ; Machine: x86-64
dd 1                    ; File version
dq offset _start        ; Entry point
dq 40h                  ; PHT file offset
dq 1900h                ; SHT file offset
dd 0                    ; Processor-specific flags
dw 40h                  ; ELF header size
dw 38h                  ; PHT entry size
dw 9                    ; Number of entries in PHT
dw 40h                  ; SHT entry size
dw 1Ah                  ; Number of entries in SHT
dw 19h                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_400040 dd 6       ; Type: PHDR
dd 4                    ; Flags
dq 40h                  ; File offset
dq offset dword_400040  ; Virtual address
dq 400040h              ; Physical address
dq 1F8h                 ; Size in file image
dq 1F8h                 ; Size in memory image
dq 8                    ; Alignment
; PHT Entry 1
dd 3                    ; Type: INTERP
dd 4                    ; Flags
dq 238h                 ; File offset
dq offset aLib64LdLinuxX8 ; Virtual address
dq 400238h              ; Physical address
dq 1Ch                  ; Size in file image
dq 1Ch                  ; Size in memory image
dq 1                    ; Alignment
; PHT Entry 2
dd 1                    ; Type: LOAD
dd 5                    ; Flags
dq 0                    ; File offset
dq offset dword_400000  ; Virtual address
dq 400000h              ; Physical address
dq 650h                 ; Size in file image
dq 650h                 ; Size in memory image
dq 200000h              ; Alignment
; PHT Entry 3
dd 1                    ; Type: LOAD
dd 6                    ; Flags
dq 0E30h                ; File offset
dq offset __frame_dummy_init_array_entry ; Virtual address
dq 600E30h              ; Physical address
dq 1F8h                 ; Size in file image
dq 200h                 ; Size in memory image
dq 200000h              ; Alignment
; PHT Entry 4
dd 2                    ; Type: DYNAMIC
dd 6                    ; Flags
dq 0E40h                ; File offset
dq offset _DYNAMIC      ; Virtual address
dq 600E40h              ; Physical address
dq 1B0h                 ; Size in file image
dq 1B0h                 ; Size in memory image
dq 8                    ; Alignment
; PHT Entry 5
dd 4                    ; Type: NOTE
dd 4                    ; Flags
dq 254h                 ; File offset
dq offset dword_400254  ; Virtual address
dq 400254h              ; Physical address
dq 20h                  ; Size in file image
dq 20h                  ; Size in memory image
dq 4                    ; Alignment
; PHT Entry 6
dd 6474E550h            ; Type: EH_FRAME
dd 4                    ; Flags
dq 544h                 ; File offset
dq offset __GNU_EH_FRAME_HDR ; Virtual address
dq 400544h              ; Physical address
dq 34h                  ; Size in file image
dq 34h                  ; Size in memory image
dq 4                    ; Alignment
; PHT Entry 7
dd 6474E551h            ; Type: STACK
dd 6                    ; Flags
dq 0                    ; File offset
dq 0                    ; Virtual address
dq 0                    ; Physical address
dq 0                    ; Size in file image
dq 0                    ; Size in memory image
dq 10h                  ; Alignment
; PHT Entry 8
dd 6474E552h            ; Type: RO-AFTER
dd 4                    ; Flags
dq 0E30h                ; File offset
dq offset __frame_dummy_init_array_entry ; Virtual address
dq 600E30h              ; Physical address
dq 1D0h                 ; Size in file image
dq 1D0h                 ; Size in memory image
dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
dword_400254 dd 4
dq 100000010h, 554E47h, 200000003h, 0
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 1
elf_gnu_hash_symbias dd 1
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 0
elf_gnu_hash_indexes dq 0
elf_gnu_hash_bucket dd 0
elf_gnu_hash_chain dd 0
; ELF Symbol Table
Elf64_Sym <0>
Elf64_Sym <offset aLibcStartMain - offset byte_4002E0,\ ; "__libc_start_main"
           12h, 0, 0, 0, 0>
Elf64_Sym <offset aGmonStart - offset byte_4002E0,\ ; "__gmon_start__"
           20h, 0, 0, 0, 0>
; ELF String Table
byte_4002E0 db 0
aLibmSo6 db 'libm.so.6',0
aGmonStart db '__gmon_start__',0
aLibpthreadSo0 db 'libpthread.so.0',0
aLibcSo6 db 'libc.so.6',0
aLibcStartMain db '__libc_start_main',0
aGlibc225 db 'GLIBC_2.2.5',0
align 4
dd 2
dq 2A00010001h, 10h, 2000009691A75h, 46h
; ELF RELA Relocation Table
Elf64_Rela <600FF0h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
Elf64_Rela <600FF8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD ends


; Segment type: Pure code
; Segment permissions: Read/Execute
_init segment dword public 'CODE' use64
assume cs:_init
;org 400388h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing



public _init_proc
_init_proc proc near
sub     rsp, 8          ; _init
mov     rax, cs:__gmon_start___ptr
test    rax, rax
jz      short loc_40039A
call    rax ; __gmon_start__

loc_40039A:
add     rsp, 8
retn
_init_proc endp

_init ends


; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD segment byte public 'CODE' use64
assume cs:LOAD
;org 40039Fh
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
align 20h
LOAD ends


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use64
assume cs:_text
;org 4003A0h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing


; Attributes: noreturn fuzzy-sp

public _start
_start proc near
xor     ebp, ebp
mov     r9, rdx         ; rtld_fini
pop     rsi             ; argc
mov     rdx, rsp        ; ubp_av
and     rsp, 0FFFFFFFFFFFFFFF0h
push    rax
push    rsp             ; stack_end
mov     r8, offset __libc_csu_fini ; fini
mov     rcx, offset __libc_csu_init ; init
mov     rdi, offset main ; main
call    cs:__libc_start_main_ptr
hlt
_start endp

align 10h



public _dl_relocate_static_pie
_dl_relocate_static_pie proc near
rep retn
_dl_relocate_static_pie endp

align 20h


; Attributes: bp-based frame

deregister_tm_clones proc near
push    rbp
mov     eax, offset __bss_start
cmp     rax, offset __bss_start
mov     rbp, rsp
jz      short loc_400408
mov     eax, 0
test    rax, rax
jz      short loc_400408
pop     rbp
mov     edi, offset __bss_start
jmp     rax
align 8

loc_400408:
pop     rbp
retn
deregister_tm_clones endp

align 10h


; Attributes: bp-based frame

register_tm_clones proc near
mov     esi, offset __bss_start
push    rbp
sub     rsi, offset __bss_start
mov     rbp, rsp
sar     rsi, 3
mov     rax, rsi
shr     rax, 3Fh
add     rsi, rax
sar     rsi, 1
jz      short loc_400448
mov     eax, 0
test    rax, rax
jz      short loc_400448
pop     rbp
mov     edi, offset __bss_start
jmp     rax
align 8

loc_400448:
pop     rbp
retn
register_tm_clones endp

align 10h



__do_global_dtors_aux proc near
cmp     cs:__bss_start, 0
jnz     short locret_400470
push    rbp
mov     rbp, rsp
call    deregister_tm_clones
mov     cs:__bss_start, 1
pop     rbp
retn
align 10h

locret_400470:
rep retn
__do_global_dtors_aux endp

align 20h


; Attributes: bp-based frame

frame_dummy proc near
push    rbp
mov     rbp, rsp
pop     rbp
jmp     short register_tm_clones
frame_dummy endp

align 10h


; Attributes: bp-based frame

; int __cdecl main(int argc, const char **argv, const char **envp)
public main
main proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    rbp
mov     rbp, rsp
xor     eax, eax
mov     [rbp+var_4], 0
mov     [rbp+var_8], 1
mov     [rbp+var_C], 2
mov     ecx, [rbp+var_8]
add     ecx, 2
mov     [rbp+var_10], ecx
pop     rbp
retn
main endp

align 20h



; void _libc_csu_init(void)
public __libc_csu_init
__libc_csu_init proc near
push    r15
push    r14
mov     r15, rdx
push    r13
push    r12
lea     r12, __frame_dummy_init_array_entry
push    rbp
lea     rbp, __do_global_dtors_aux_fini_array_entry
push    rbx
mov     r13d, edi
mov     r14, rsi
sub     rbp, r12
sub     rsp, 8
sar     rbp, 3
call    _init_proc
test    rbp, rbp
jz      short loc_400516
xor     ebx, ebx
nop     dword ptr [rax+rax+00000000h]

loc_400500:
mov     rdx, r15
mov     rsi, r14
mov     edi, r13d
call    qword ptr [r12+rbx*8]
add     rbx, 1
cmp     rbp, rbx
jnz     short loc_400500

loc_400516:
add     rsp, 8
pop     rbx
pop     rbp
pop     r12
pop     r13
pop     r14
pop     r15
retn
__libc_csu_init endp

align 10h



; void _libc_csu_fini(void)
public __libc_csu_fini
__libc_csu_fini proc near
rep retn
__libc_csu_fini endp

_text ends


; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD segment byte public 'CODE' use64
assume cs:LOAD
;org 400532h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
align 4
LOAD ends


; Segment type: Pure code
; Segment permissions: Read/Execute
_fini segment dword public 'CODE' use64
assume cs:_fini
;org 400534h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing



public _term_proc
_term_proc proc near
sub     rsp, 8          ; _fini
add     rsp, 8
retn
_term_proc endp

_fini ends


; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD segment byte public 'CODE' use64
assume cs:LOAD
;org 40053Dh
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
align 20h
LOAD ends


; Segment type: Pure data
; Segment permissions: Read
_rodata segment dword public 'CONST' use64
assume cs:_rodata
;org 400540h
public _IO_stdin_used
_IO_stdin_used db    1
db    0
db    2
db    0
_rodata ends


; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr segment dword public 'CONST' use64
assume cs:_eh_frame_hdr
;org 400544h
__GNU_EH_FRAME_HDR db    1
db  1Bh
db    3
db  3Bh ; ;
db  30h ; 0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  5Ch ; \
db 0FEh
db 0FFh
db 0FFh
db  4Ch ; L
db    0
db    0
db    0
db  8Ch
db 0FEh
db 0FFh
db 0FFh
db  78h ; x
db    0
db    0
db    0
db  4Ch ; L
db 0FFh
db 0FFh
db 0FFh
db  8Ch
db    0
db    0
db    0
db  7Ch ; |
db 0FFh
db 0FFh
db 0FFh
db 0ACh
db    0
db    0
db    0
db 0ECh
db 0FFh
db 0FFh
db 0FFh
db 0F4h
db    0
db    0
db    0
_eh_frame_hdr ends


; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame segment para public 'CONST' use64
assume cs:_eh_frame
;org 400578h
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  78h ; x
db  10h
db    1
db  1Bh
db  0Ch
db    7
db    8
db  90h
db    1
db    7
db  10h
db  10h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db 0FEh
db 0FFh
db 0FFh
db  2Bh ; +
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  78h ; x
db  10h
db    1
db  1Bh
db  0Ch
db    7
db    8
db  90h
db    1
db    0
db    0
db  10h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  0Ch
db 0FEh
db 0FFh
db 0FFh
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  30h ; 0
db    0
db    0
db    0
db 0B8h
db 0FEh
db 0FFh
db 0FFh
db  26h ; &
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  61h ; a
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  44h ; D
db    0
db    0
db    0
db  50h ; P
db    0
db    0
db    0
db 0C8h
db 0FEh
db 0FFh
db 0FFh
db  65h ; e
db    0
db    0
db    0
db    0
db  42h ; B
db  0Eh
db  10h
db  8Fh
db    2
db  42h ; B
db  0Eh
db  18h
db  8Eh
db    3
db  45h ; E
db  0Eh
db  20h
db  8Dh
db    4
db  42h ; B
db  0Eh
db  28h ; (
db  8Ch
db    5
db  48h ; H
db  0Eh
db  30h ; 0
db  86h
db    6
db  48h ; H
db  0Eh
db  38h ; 8
db  83h
db    7
db  4Dh ; M
db  0Eh
db  40h ; @
db  72h ; r
db  0Eh
db  38h ; 8
db  41h ; A
db  0Eh
db  30h ; 0
db  41h ; A
db  0Eh
db  28h ; (
db  42h ; B
db  0Eh
db  20h
db  42h ; B
db  0Eh
db  18h
db  42h ; B
db  0Eh
db  10h
db  42h ; B
db  0Eh
db    8
db    0
db  10h
db    0
db    0
db    0
db  98h
db    0
db    0
db    0
db 0F0h
db 0FEh
db 0FFh
db 0FFh
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
__FRAME_END__ db    0
db    0
db    0
db    0
_eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array segment para public 'DATA' use64
assume cs:_init_array
;org 600E30h
__frame_dummy_init_array_entry dq offset frame_dummy ; Alternative name is '__init_array_start'
_init_array ends

; ELF Termination Function Table

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array segment para public 'DATA' use64
assume cs:_fini_array
;org 600E38h
__do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux ; Alternative name is '__init_array_end'
_fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD segment byte public 'DATA' use64
assume cs:LOAD
;org 600E40h
_DYNAMIC Elf64_Dyn <1, 1> ; DT_NEEDED libm.so.6
Elf64_Dyn <1, 1Ah>      ; DT_NEEDED libpthread.so.0
Elf64_Dyn <1, 2Ah>      ; DT_NEEDED libc.so.6
Elf64_Dyn <0Ch, 400388h> ; DT_INIT
Elf64_Dyn <0Dh, 400534h> ; DT_FINI
Elf64_Dyn <19h, 600E30h> ; DT_INIT_ARRAY
Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
Elf64_Dyn <1Ah, 600E38h> ; DT_FINI_ARRAY
Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
Elf64_Dyn <6FFFFEF5h, 400278h> ; DT_GNU_HASH
Elf64_Dyn <5, 4002E0h>  ; DT_STRTAB
Elf64_Dyn <6, 400298h>  ; DT_SYMTAB
Elf64_Dyn <0Ah, 52h>    ; DT_STRSZ
Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
Elf64_Dyn <15h, 0>      ; DT_DEBUG
Elf64_Dyn <7, 400358h>  ; DT_RELA
Elf64_Dyn <8, 30h>      ; DT_RELASZ
Elf64_Dyn <9, 18h>      ; DT_RELAENT
Elf64_Dyn <6FFFFFFEh, 400338h> ; DT_VERNEED
Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
Elf64_Dyn <6FFFFFF0h, 400332h> ; DT_VERSYM
Elf64_Dyn <0>           ; DT_NULL
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
LOAD ends


; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got segment para public 'DATA' use64
assume cs:_got
;org 600FF0h
__libc_start_main_ptr dq offset __libc_start_main
__gmon_start___ptr dq offset __gmon_start__
_got ends


; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got_plt segment para public 'DATA' use64
assume cs:_got_plt
;org 601000h
_GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
_got_plt ends


; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data segment para public 'DATA' use64
assume cs:_data
;org 601018h
public __data_start ; weak
__data_start db    0    ; Alternative name is '__data_start'
                        ; data_start
db    0
db    0
db    0
db    0
db    0
db    0
db    0
public __dso_handle
__dso_handle db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
_data ends


; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss segment byte public 'BSS' use64
assume cs:_bss
;org 601028h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
public __bss_start
__bss_start db ?        ; Alternative name is '__TMC_END__'
                        ; completed.7697
                        ; _edata
align 10h
_bss ends


; Segment type: Zero-length
_prgend segment byte public '' use64
_end label byte
_prgend ends


; Segment type: Externs
; extern
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extrn __libc_start_main:near
extrn __gmon_start__:near ; weak


end _start
